// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StichtingAccessibility.Server.Models;

#nullable disable

namespace StichtingAccessibility.Server.Migrations
{
    [DbContext(typeof(StichtingDbContext))]
    [Migration("20240120220039_ModelsWithConfiguration")]
    partial class ModelsWithConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ErvaringsdeskundigOnderzoek", b =>
                {
                    b.Property<string>("ErvaringsdeskundigenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OnderzoekId")
                        .HasColumnType("int");

                    b.HasKey("ErvaringsdeskundigenId", "OnderzoekId");

                    b.HasIndex("OnderzoekId");

                    b.ToTable("OnderzoekErvaringsdeskundig", (string)null);
                });

            modelBuilder.Entity("ErvaringsdeskundigVoogd", b =>
                {
                    b.Property<string>("ErvaringsdeskundigenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VoogdenId")
                        .HasColumnType("int");

                    b.HasKey("ErvaringsdeskundigenId", "VoogdenId");

                    b.HasIndex("VoogdenId");

                    b.ToTable("ErvaringsdeskundigVoogd", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GebruikerType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("GebruikerType").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.BedrijfsPortaal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BedrijfAdres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BedrijfInformatie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BedrijfNaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("BedrijfsPortaalen");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BedrijfsPortaal");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Customer__A4AE64D8BBE16905");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Onderzoek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BedrijfId")
                        .HasColumnType("int");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DatumGeplaatst")
                        .HasColumnType("date");

                    b.Property<bool>("IsGekeurd")
                        .HasColumnType("bit");

                    b.Property<string>("OnderzoekType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BedrijfId");

                    b.ToTable("Onderzoeken");

                    b.HasDiscriminator<string>("OnderzoekType").HasValue("Onderzoek");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uitslag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tracking");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Voogd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAdres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Voogden");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Vraag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Antwoord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VragenlijstId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VragenlijstId");

                    b.ToTable("Vraag");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Gebruiker", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("Gebruiker");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.BeheerdersPortaal", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.BedrijfsPortaal");

                    b.HasDiscriminator().HasValue("BeheerdersPortaal");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Uitnodiging", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.Onderzoek");

                    b.Property<string>("AdresLocatie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Datum")
                        .HasColumnType("date");

                    b.Property<string>("RouteBeschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Tijd")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("Uitnodiging");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Vragenlijst", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.Onderzoek");

                    b.HasDiscriminator().HasValue("Vragenlijst");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.WebsiteOnderzoek", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.Onderzoek");

                    b.Property<int?>("TrackingId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("TrackingId");

                    b.HasDiscriminator().HasValue("WebsiteOnderzoek");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.BedrijfsMedewerker", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.Gebruiker");

                    b.Property<int?>("BedrijfsPortaalId")
                        .HasColumnType("int");

                    b.HasIndex("BedrijfsPortaalId");

                    b.HasDiscriminator().HasValue("Bedrijfsmedewerker");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Beheerder", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.Gebruiker");

                    b.Property<int?>("BeheerdersPortaalId")
                        .HasColumnType("int");

                    b.HasIndex("BeheerdersPortaalId");

                    b.HasDiscriminator().HasValue("Beheerder");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Ervaringsdeskundig", b =>
                {
                    b.HasBaseType("StichtingAccessibility.Server.Models.Gebruiker");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenaderingOpties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenaderingsOptiesList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoorkeurDeelname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoorkeurOnderzoekList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Ervaringsdeskundig");
                });

            modelBuilder.Entity("ErvaringsdeskundigOnderzoek", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.Ervaringsdeskundig", null)
                        .WithMany()
                        .HasForeignKey("ErvaringsdeskundigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StichtingAccessibility.Server.Models.Onderzoek", null)
                        .WithMany()
                        .HasForeignKey("OnderzoekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ErvaringsdeskundigVoogd", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.Ervaringsdeskundig", null)
                        .WithMany()
                        .HasForeignKey("ErvaringsdeskundigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StichtingAccessibility.Server.Models.Voogd", null)
                        .WithMany()
                        .HasForeignKey("VoogdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Onderzoek", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.BedrijfsPortaal", "Bedrijf")
                        .WithMany("Onderzoeken")
                        .HasForeignKey("BedrijfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bedrijf");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Vraag", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.Vragenlijst", null)
                        .WithMany("Vragen")
                        .HasForeignKey("VragenlijstId");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.WebsiteOnderzoek", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.Tracking", "Tracking")
                        .WithMany()
                        .HasForeignKey("TrackingId");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.BedrijfsMedewerker", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.BedrijfsPortaal", null)
                        .WithMany("BedrijfsMedewerkers")
                        .HasForeignKey("BedrijfsPortaalId");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Beheerder", b =>
                {
                    b.HasOne("StichtingAccessibility.Server.Models.BeheerdersPortaal", null)
                        .WithMany("Beheerders")
                        .HasForeignKey("BeheerdersPortaalId");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.BedrijfsPortaal", b =>
                {
                    b.Navigation("BedrijfsMedewerkers");

                    b.Navigation("Onderzoeken");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.BeheerdersPortaal", b =>
                {
                    b.Navigation("Beheerders");
                });

            modelBuilder.Entity("StichtingAccessibility.Server.Models.Vragenlijst", b =>
                {
                    b.Navigation("Vragen");
                });
#pragma warning restore 612, 618
        }
    }
}
